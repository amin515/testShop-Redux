{"ast":null,"code":"// brand actions\n\nimport axios from \"axios\";\nimport { GET_BRANDS_FAILED, GET_BRANDS_REQUEST, GET_BRANDS_SUCCESS } from \"./actionTypes\";\n\n// get all brands\nexport const getAllBrand = () => async dispatch => {\n  try {\n    dispatch({\n      type: GET_BRANDS_REQUEST\n    });\n    await axios.get(\"http://localhost:5050/api/v1/product/brands\").then(res => {\n      dispatch({\n        type: GET_BRANDS_SUCCESS,\n        payload: res.data.brand\n      });\n    }).catch(err => {\n      dispatch({\n        type: GET_BRANDS_FAILED,\n        payload: err.message\n      });\n    });\n  } catch (error) {\n    dispatch({\n      type: GET_BRANDS_FAILED,\n      payload: error.message\n    });\n  }\n};\n\n// create brands\nexport const createBrand = data => async dispatch => {\n  try {\n    dispatch({\n      type: GET_BRANDS_REQUEST\n    });\n    await axios.post(\"http://localhost:5050/api/v1/product/brands, ${}\").then(res => {\n      dispatch({\n        type: GET_BRANDS_SUCCESS,\n        payload: res.data.brand\n      });\n    }).catch(err => {\n      dispatch({\n        type: GET_BRANDS_FAILED,\n        payload: err.message\n      });\n    });\n  } catch (error) {\n    dispatch({\n      type: GET_BRANDS_FAILED,\n      payload: error.message\n    });\n  }\n};","map":{"version":3,"names":["axios","GET_BRANDS_FAILED","GET_BRANDS_REQUEST","GET_BRANDS_SUCCESS","getAllBrand","dispatch","type","get","then","res","payload","data","brand","catch","err","message","error","createBrand","post"],"sources":["H:/testShop/redux-shop/src/redux/reduxAction/action.js"],"sourcesContent":["// brand actions\r\n\r\nimport axios from \"axios\";\r\nimport {\r\n  GET_BRANDS_FAILED,\r\n  GET_BRANDS_REQUEST,\r\n  GET_BRANDS_SUCCESS,\r\n} from \"./actionTypes\";\r\n\r\n// get all brands\r\nexport const getAllBrand = () => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: GET_BRANDS_REQUEST });\r\n    await axios\r\n      .get(\"http://localhost:5050/api/v1/product/brands\")\r\n      .then((res) => {\r\n        dispatch({ type: GET_BRANDS_SUCCESS, payload: res.data.brand });\r\n      })\r\n      .catch((err) => {\r\n        dispatch({ type: GET_BRANDS_FAILED, payload: err.message });\r\n      });\r\n  } catch (error) {\r\n    dispatch({ type: GET_BRANDS_FAILED, payload: error.message });\r\n  }\r\n};\r\n\r\n// create brands\r\nexport const createBrand = (data) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: GET_BRANDS_REQUEST });\r\n    await axios\r\n      .post(\"http://localhost:5050/api/v1/product/brands, ${}\")\r\n      .then((res) => {\r\n        dispatch({ type: GET_BRANDS_SUCCESS, payload: res.data.brand });\r\n      })\r\n      .catch((err) => {\r\n        dispatch({ type: GET_BRANDS_FAILED, payload: err.message });\r\n      });\r\n  } catch (error) {\r\n    dispatch({ type: GET_BRANDS_FAILED, payload: error.message });\r\n  }\r\n};\r\n"],"mappings":"AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,SACEC,iBAAiB,EACjBC,kBAAkB,EAClBC,kBAAkB,QACb,eAAe;;AAEtB;AACA,OAAO,MAAMC,WAAW,GAAGA,CAAA,KAAM,MAAOC,QAAQ,IAAK;EACnD,IAAI;IACFA,QAAQ,CAAC;MAAEC,IAAI,EAAEJ;IAAmB,CAAC,CAAC;IACtC,MAAMF,KAAK,CACRO,GAAG,CAAC,6CAA6C,CAAC,CAClDC,IAAI,CAAEC,GAAG,IAAK;MACbJ,QAAQ,CAAC;QAAEC,IAAI,EAAEH,kBAAkB;QAAEO,OAAO,EAAED,GAAG,CAACE,IAAI,CAACC;MAAM,CAAC,CAAC;IACjE,CAAC,CAAC,CACDC,KAAK,CAAEC,GAAG,IAAK;MACdT,QAAQ,CAAC;QAAEC,IAAI,EAAEL,iBAAiB;QAAES,OAAO,EAAEI,GAAG,CAACC;MAAQ,CAAC,CAAC;IAC7D,CAAC,CAAC;EACN,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdX,QAAQ,CAAC;MAAEC,IAAI,EAAEL,iBAAiB;MAAES,OAAO,EAAEM,KAAK,CAACD;IAAQ,CAAC,CAAC;EAC/D;AACF,CAAC;;AAED;AACA,OAAO,MAAME,WAAW,GAAIN,IAAI,IAAK,MAAON,QAAQ,IAAK;EACvD,IAAI;IACFA,QAAQ,CAAC;MAAEC,IAAI,EAAEJ;IAAmB,CAAC,CAAC;IACtC,MAAMF,KAAK,CACRkB,IAAI,CAAC,kDAAkD,CAAC,CACxDV,IAAI,CAAEC,GAAG,IAAK;MACbJ,QAAQ,CAAC;QAAEC,IAAI,EAAEH,kBAAkB;QAAEO,OAAO,EAAED,GAAG,CAACE,IAAI,CAACC;MAAM,CAAC,CAAC;IACjE,CAAC,CAAC,CACDC,KAAK,CAAEC,GAAG,IAAK;MACdT,QAAQ,CAAC;QAAEC,IAAI,EAAEL,iBAAiB;QAAES,OAAO,EAAEI,GAAG,CAACC;MAAQ,CAAC,CAAC;IAC7D,CAAC,CAAC;EACN,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdX,QAAQ,CAAC;MAAEC,IAAI,EAAEL,iBAAiB;MAAES,OAAO,EAAEM,KAAK,CAACD;IAAQ,CAAC,CAAC;EAC/D;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}